plugins {
	id 'fabric-loom'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

base {
	archivesName = project.archives_base_name
}

sourceSets.register("mixin") {
	it.compileClasspath += sourceSets["main"].compileClasspath
	it.runtimeClasspath += sourceSets["main"].runtimeClasspath
}
sourceSets.register("mixin1") {
	it.compileClasspath += sourceSets["main"].compileClasspath
	it.runtimeClasspath += sourceSets["main"].runtimeClasspath
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16
}

loom {
	mixin {
		useLegacyMixinAp = true

		defaultRefmapName = "default-refmap0000.json"
		add(sourceSets["main"], "main-refmap0000.json")
		add(sourceSets["mixin"])

		messages {
			MIXIN_SOFT_TARGET_IS_PUBLIC = 'error'
		}
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

tasks.register("mixinJar0", Jar.class) {
	it.archiveClassifier.set("mixin")
	it.from(sourceSets["mixin"].output)
}

tasks.register("mixinJar1", Jar.class) {
	it.archiveClassifier.set("mixin1")
	it.from(sourceSets["mixin1"].output)
}

assemble {
	dependsOn tasks["mixinJar0"]
	dependsOn tasks["mixinJar1"]
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
